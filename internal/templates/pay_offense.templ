package templates

import "tipjar/internal/models"
import "fmt"

templ PayOffense(user *models.User, jar *models.TipJar, offense *models.OffenseDetail) {
	@Base("Pay Offense", user) {
		<div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<div class="text-center mb-8">
				<h1 class="text-3xl font-bold text-gray-900">Mark Offense as Paid</h1>
				<p class="text-gray-600 mt-2">Settle the score and upload proof for full transparency.</p>
			</div>

			<div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 sm:p-8" x-data="payOffenseForm()">
				<!-- Offense Details -->
				<div class="bg-gray-50 rounded-xl p-4 mb-6">
					<h3 class="font-semibold text-gray-900 mb-2">Offense Details</h3>
					<p class="text-sm text-gray-600">
						<span class="font-medium">Type:</span> { offense.OffenseTypeName }
					</p>
					if offense.Notes != nil {
						<p class="text-sm text-gray-600">
							<span class="font-medium">Notes:</span> { *offense.Notes }
						</p>
					}
					<p class="text-sm text-gray-600">
						<span class="font-medium">Amount Owed:</span> 
						{ fmt.Sprintf("%.0f %s", offense.Amount, offense.Unit) }
					</p>
				</div>

				<form @submit.prevent="submitForm" class="space-y-6">
					if offense.Unit == "dollars" || offense.Unit == "USD" {
						<!-- Monetary Payment -->
						<div class="grid grid-cols-2 gap-4">
							<div>
								<label class="form-label">Amount Paid</label>
								<div class="relative">
									<span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
									<input type="number" 
									       x-model="form.amount_paid"
									       step="0.01" 
									       min="0"
									       value={ fmt.Sprintf("%.2f", offense.Amount) }
									       class="form-input pl-8" 
									       required/>
								</div>
							</div>
							<div>
								<label class="form-label">Payment Method</label>
								<input type="text" 
								       x-model="form.payment_method"
								       placeholder="e.g., Venmo, Cash"
								       class="form-input"/>
							</div>
						</div>

						<div>
							<label class="form-label">Date of Payment</label>
							<input type="date" 
							       x-model="form.payment_date"
							       class="form-input"
							       required/>
						</div>
					} else {
						<!-- Non-Monetary Payment -->
						<div>
							<label class="form-label">Completion Details</label>
							<textarea x-model="form.completion_notes"
							          rows="3"
							          placeholder={ fmt.Sprintf("Describe how you completed the %s...", offense.Unit) }
							          class="form-input"
							          required></textarea>
						</div>

						<div>
							<label class="form-label">Date of Completion</label>
							<input type="date" 
							       x-model="form.completion_date"
							       class="form-input"
							       required/>
						</div>
					}

					<!-- Notes -->
					<div>
						<label class="form-label">Notes (Optional)</label>
						<textarea x-model="form.notes"
						          rows="3"
						          placeholder="Any additional information about the payment..."
						          class="form-input"></textarea>
					</div>

					<!-- Proof Upload -->
					<div>
						<label class="form-label">Proof of Payment</label>
						<div class="border-2 border-dashed border-gray-300 rounded-xl p-6 text-center">
							<svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
							</svg>
							<p class="text-blue-600 font-medium">Upload a file</p>
							<p class="text-gray-500 text-sm">or drag and drop</p>
							<p class="text-gray-400 text-xs mt-1">PNG, JPG, GIF up to 10MB</p>
							<input type="file" 
							       @change="handleFileUpload"
							       accept="image/*,.pdf"
							       class="hidden"/>
						</div>
					</div>

					<!-- Submit Button -->
					<div class="flex justify-center">
						<button type="submit" 
						        :disabled="loading"
						        class="btn btn-primary px-8 py-3 text-lg">
							<span x-show="!loading">Submit Payment</span>
							<span x-show="loading" class="flex items-center">
								<div class="spinner mr-2"></div>
								Submitting...
							</span>
						</button>
					</div>
				</form>
			</div>
		</div>

		<script>
			function payOffenseForm() {
				return {
					form: {
						amount_paid: '',
						payment_method: '',
						payment_date: new Date().toISOString().split('T')[0],
						completion_notes: '',
						completion_date: new Date().toISOString().split('T')[0],
						notes: '',
						proof_file: null
					},
					loading: false,
					
					handleFileUpload(event) {
						this.form.proof_file = event.target.files[0];
					},
					
					async submitForm() {
						this.loading = true;
						
						try {
							const formData = new FormData();
							
							// Add all form fields
							Object.keys(this.form).forEach(key => {
								if (this.form[key] && key !== 'proof_file') {
									formData.append(key, this.form[key]);
								}
							});
							
							if (this.form.proof_file) {
								formData.append('proof_file', this.form.proof_file);
							}
							
							const response = await fetch(window.location.pathname, {
								method: 'POST',
								body: formData
							});
							
							if (response.ok) {
								const data = await response.json();
								window.location.href = data.redirect;
							} else {
								const errorText = await response.text();
								this.$store.notifications.add(errorText || 'Failed to submit payment', 'error');
							}
						} catch (error) {
							this.$store.notifications.add('Network error. Please try again.', 'error');
						} finally {
							this.loading = false;
						}
					}
				}
			}
		</script>
	}
}
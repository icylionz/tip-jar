// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: offense_types.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOffenseType = `-- name: CreateOffenseType :one
INSERT INTO offense_types (jar_id, name, description, cost_type, cost_amount, cost_action)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, jar_id, name, description, cost_type, cost_amount, cost_action, is_active, created_at, updated_at
`

type CreateOffenseTypeParams struct {
	JarID       int32          `db:"jar_id" json:"jar_id"`
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	CostType    string         `db:"cost_type" json:"cost_type"`
	CostAmount  pgtype.Numeric `db:"cost_amount" json:"cost_amount"`
	CostAction  pgtype.Text    `db:"cost_action" json:"cost_action"`
}

func (q *Queries) CreateOffenseType(ctx context.Context, arg CreateOffenseTypeParams) (OffenseType, error) {
	row := q.db.QueryRow(ctx, createOffenseType,
		arg.JarID,
		arg.Name,
		arg.Description,
		arg.CostType,
		arg.CostAmount,
		arg.CostAction,
	)
	var i OffenseType
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostType,
		&i.CostAmount,
		&i.CostAction,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateOffenseType = `-- name: DeactivateOffenseType :one
UPDATE offense_types
SET is_active = false, updated_at = NOW()
WHERE id = $1
RETURNING id, jar_id, name, description, cost_type, cost_amount, cost_action, is_active, created_at, updated_at
`

func (q *Queries) DeactivateOffenseType(ctx context.Context, id int32) (OffenseType, error) {
	row := q.db.QueryRow(ctx, deactivateOffenseType, id)
	var i OffenseType
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostType,
		&i.CostAmount,
		&i.CostAction,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOffenseType = `-- name: GetOffenseType :one
SELECT id, jar_id, name, description, cost_type, cost_amount, cost_action, is_active, created_at, updated_at
FROM offense_types
WHERE id = $1
`

func (q *Queries) GetOffenseType(ctx context.Context, id int32) (OffenseType, error) {
	row := q.db.QueryRow(ctx, getOffenseType, id)
	var i OffenseType
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostType,
		&i.CostAmount,
		&i.CostAction,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllOffenseTypesForJar = `-- name: ListAllOffenseTypesForJar :many
SELECT id, jar_id, name, description, cost_type, cost_amount, cost_action, is_active, created_at, updated_at
FROM offense_types
WHERE jar_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAllOffenseTypesForJar(ctx context.Context, jarID int32) ([]OffenseType, error) {
	rows, err := q.db.Query(ctx, listAllOffenseTypesForJar, jarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OffenseType
	for rows.Next() {
		var i OffenseType
		if err := rows.Scan(
			&i.ID,
			&i.JarID,
			&i.Name,
			&i.Description,
			&i.CostType,
			&i.CostAmount,
			&i.CostAction,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOffenseTypesForJar = `-- name: ListOffenseTypesForJar :many
SELECT id, jar_id, name, description, cost_type, cost_amount, cost_action, is_active, created_at, updated_at
FROM offense_types
WHERE jar_id = $1 AND is_active = true
ORDER BY name ASC
`

func (q *Queries) ListOffenseTypesForJar(ctx context.Context, jarID int32) ([]OffenseType, error) {
	rows, err := q.db.Query(ctx, listOffenseTypesForJar, jarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OffenseType
	for rows.Next() {
		var i OffenseType
		if err := rows.Scan(
			&i.ID,
			&i.JarID,
			&i.Name,
			&i.Description,
			&i.CostType,
			&i.CostAmount,
			&i.CostAction,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffenseType = `-- name: UpdateOffenseType :one
UPDATE offense_types
SET name = $2, description = $3, cost_type = $4, cost_amount = $5, cost_action = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, jar_id, name, description, cost_type, cost_amount, cost_action, is_active, created_at, updated_at
`

type UpdateOffenseTypeParams struct {
	ID          int32          `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	CostType    string         `db:"cost_type" json:"cost_type"`
	CostAmount  pgtype.Numeric `db:"cost_amount" json:"cost_amount"`
	CostAction  pgtype.Text    `db:"cost_action" json:"cost_action"`
}

func (q *Queries) UpdateOffenseType(ctx context.Context, arg UpdateOffenseTypeParams) (OffenseType, error) {
	row := q.db.QueryRow(ctx, updateOffenseType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CostType,
		arg.CostAmount,
		arg.CostAction,
	)
	var i OffenseType
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostType,
		&i.CostAmount,
		&i.CostAction,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

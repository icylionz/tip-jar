// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: offense_types.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOffenseType = `-- name: CreateOffenseType :one
INSERT INTO offense_types (jar_id, name, description, cost_amount, cost_unit)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, jar_id, name, description, cost_amount, cost_unit, is_active, created_at, updated_at
`

type CreateOffenseTypeParams struct {
	JarID       int32          `db:"jar_id" json:"jar_id"`
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	CostAmount  pgtype.Numeric `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text    `db:"cost_unit" json:"cost_unit"`
}

type CreateOffenseTypeRow struct {
	ID          int32            `db:"id" json:"id"`
	JarID       int32            `db:"jar_id" json:"jar_id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	CostAmount  pgtype.Numeric   `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text      `db:"cost_unit" json:"cost_unit"`
	IsActive    bool             `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateOffenseType(ctx context.Context, arg CreateOffenseTypeParams) (CreateOffenseTypeRow, error) {
	row := q.db.QueryRow(ctx, createOffenseType,
		arg.JarID,
		arg.Name,
		arg.Description,
		arg.CostAmount,
		arg.CostUnit,
	)
	var i CreateOffenseTypeRow
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostAmount,
		&i.CostUnit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOffenseType = `-- name: GetOffenseType :one
SELECT id, jar_id, name, description, cost_amount, cost_unit, is_active, created_at, updated_at
FROM offense_types
WHERE id = $1
`

type GetOffenseTypeRow struct {
	ID          int32            `db:"id" json:"id"`
	JarID       int32            `db:"jar_id" json:"jar_id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	CostAmount  pgtype.Numeric   `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text      `db:"cost_unit" json:"cost_unit"`
	IsActive    bool             `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetOffenseType(ctx context.Context, id int32) (GetOffenseTypeRow, error) {
	row := q.db.QueryRow(ctx, getOffenseType, id)
	var i GetOffenseTypeRow
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostAmount,
		&i.CostUnit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllOffenseTypesForJar = `-- name: ListAllOffenseTypesForJar :many
SELECT id, jar_id, name, description, cost_amount, cost_unit, is_active, created_at, updated_at
FROM offense_types
WHERE jar_id = $1
ORDER BY created_at DESC
`

type ListAllOffenseTypesForJarRow struct {
	ID          int32            `db:"id" json:"id"`
	JarID       int32            `db:"jar_id" json:"jar_id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	CostAmount  pgtype.Numeric   `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text      `db:"cost_unit" json:"cost_unit"`
	IsActive    bool             `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) ListAllOffenseTypesForJar(ctx context.Context, jarID int32) ([]ListAllOffenseTypesForJarRow, error) {
	rows, err := q.db.Query(ctx, listAllOffenseTypesForJar, jarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllOffenseTypesForJarRow
	for rows.Next() {
		var i ListAllOffenseTypesForJarRow
		if err := rows.Scan(
			&i.ID,
			&i.JarID,
			&i.Name,
			&i.Description,
			&i.CostAmount,
			&i.CostUnit,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOffenseTypesForJar = `-- name: ListOffenseTypesForJar :many
SELECT id, jar_id, name, description, cost_amount, cost_unit, is_active, created_at, updated_at
FROM offense_types
WHERE jar_id = $1 AND is_active = true
ORDER BY name ASC
`

type ListOffenseTypesForJarRow struct {
	ID          int32            `db:"id" json:"id"`
	JarID       int32            `db:"jar_id" json:"jar_id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	CostAmount  pgtype.Numeric   `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text      `db:"cost_unit" json:"cost_unit"`
	IsActive    bool             `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) ListOffenseTypesForJar(ctx context.Context, jarID int32) ([]ListOffenseTypesForJarRow, error) {
	rows, err := q.db.Query(ctx, listOffenseTypesForJar, jarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOffenseTypesForJarRow
	for rows.Next() {
		var i ListOffenseTypesForJarRow
		if err := rows.Scan(
			&i.ID,
			&i.JarID,
			&i.Name,
			&i.Description,
			&i.CostAmount,
			&i.CostUnit,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setOffenseTypeActiveStatus = `-- name: SetOffenseTypeActiveStatus :one
UPDATE offense_types
SET is_active = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, jar_id, name, description, cost_amount, cost_unit, is_active, created_at, updated_at
`

type SetOffenseTypeActiveStatusParams struct {
	ID       int32 `db:"id" json:"id"`
	IsActive bool  `db:"is_active" json:"is_active"`
}

type SetOffenseTypeActiveStatusRow struct {
	ID          int32            `db:"id" json:"id"`
	JarID       int32            `db:"jar_id" json:"jar_id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	CostAmount  pgtype.Numeric   `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text      `db:"cost_unit" json:"cost_unit"`
	IsActive    bool             `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) SetOffenseTypeActiveStatus(ctx context.Context, arg SetOffenseTypeActiveStatusParams) (SetOffenseTypeActiveStatusRow, error) {
	row := q.db.QueryRow(ctx, setOffenseTypeActiveStatus, arg.ID, arg.IsActive)
	var i SetOffenseTypeActiveStatusRow
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostAmount,
		&i.CostUnit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOffenseType = `-- name: UpdateOffenseType :one
UPDATE offense_types
SET name = $2, description = $3, cost_amount = $4, cost_unit = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, jar_id, name, description, cost_amount, cost_unit, is_active, created_at, updated_at
`

type UpdateOffenseTypeParams struct {
	ID          int32          `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	CostAmount  pgtype.Numeric `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text    `db:"cost_unit" json:"cost_unit"`
}

type UpdateOffenseTypeRow struct {
	ID          int32            `db:"id" json:"id"`
	JarID       int32            `db:"jar_id" json:"jar_id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	CostAmount  pgtype.Numeric   `db:"cost_amount" json:"cost_amount"`
	CostUnit    pgtype.Text      `db:"cost_unit" json:"cost_unit"`
	IsActive    bool             `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateOffenseType(ctx context.Context, arg UpdateOffenseTypeParams) (UpdateOffenseTypeRow, error) {
	row := q.db.QueryRow(ctx, updateOffenseType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CostAmount,
		arg.CostUnit,
	)
	var i UpdateOffenseTypeRow
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.Name,
		&i.Description,
		&i.CostAmount,
		&i.CostUnit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

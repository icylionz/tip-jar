// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tip_jars.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTipJar = `-- name: CreateTipJar :one
INSERT INTO tip_jars (name, description, invite_code, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, invite_code, created_by, created_at, updated_at
`

type CreateTipJarParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	InviteCode  string      `db:"invite_code" json:"invite_code"`
	CreatedBy   int32       `db:"created_by" json:"created_by"`
}

func (q *Queries) CreateTipJar(ctx context.Context, arg CreateTipJarParams) (TipJar, error) {
	row := q.db.QueryRow(ctx, createTipJar,
		arg.Name,
		arg.Description,
		arg.InviteCode,
		arg.CreatedBy,
	)
	var i TipJar
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InviteCode,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTipJar = `-- name: DeleteTipJar :exec
DELETE FROM tip_jars
WHERE id = $1
`

func (q *Queries) DeleteTipJar(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTipJar, id)
	return err
}

const getTipJar = `-- name: GetTipJar :one
SELECT id, name, description, invite_code, created_by, created_at, updated_at
FROM tip_jars
WHERE id = $1
`

func (q *Queries) GetTipJar(ctx context.Context, id int32) (TipJar, error) {
	row := q.db.QueryRow(ctx, getTipJar, id)
	var i TipJar
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InviteCode,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTipJarByInviteCode = `-- name: GetTipJarByInviteCode :one
SELECT id, name, description, invite_code, created_by, created_at, updated_at
FROM tip_jars
WHERE invite_code = $1
`

func (q *Queries) GetTipJarByInviteCode(ctx context.Context, inviteCode string) (TipJar, error) {
	row := q.db.QueryRow(ctx, getTipJarByInviteCode, inviteCode)
	var i TipJar
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InviteCode,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTipJarsForUser = `-- name: ListTipJarsForUser :many
SELECT tj.id, tj.name, tj.description, tj.invite_code, tj.created_by, tj.created_at, tj.updated_at
FROM tip_jars tj
INNER JOIN jar_memberships jm ON tj.id = jm.jar_id
WHERE jm.user_id = $1
ORDER BY tj.created_at DESC
`

func (q *Queries) ListTipJarsForUser(ctx context.Context, userID int32) ([]TipJar, error) {
	rows, err := q.db.Query(ctx, listTipJarsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TipJar
	for rows.Next() {
		var i TipJar
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.InviteCode,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTipJarsForUserWithMemberCount = `-- name: ListTipJarsForUserWithMemberCount :many
SELECT tj.id, tj.name, tj.description, tj.invite_code, tj.created_by, tj.created_at, tj.updated_at,
       member_counts.member_count
FROM tip_jars tj
INNER JOIN jar_memberships jm ON tj.id = jm.jar_id
INNER JOIN (
    SELECT jar_id, COUNT(*) as member_count
    FROM jar_memberships
    GROUP BY jar_id
) member_counts ON tj.id = member_counts.jar_id
WHERE jm.user_id = $1
ORDER BY tj.created_at DESC
`

type ListTipJarsForUserWithMemberCountRow struct {
	ID          int32            `db:"id" json:"id"`
	Name        string           `db:"name" json:"name"`
	Description pgtype.Text      `db:"description" json:"description"`
	InviteCode  string           `db:"invite_code" json:"invite_code"`
	CreatedBy   int32            `db:"created_by" json:"created_by"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	MemberCount int64            `db:"member_count" json:"member_count"`
}

func (q *Queries) ListTipJarsForUserWithMemberCount(ctx context.Context, userID int32) ([]ListTipJarsForUserWithMemberCountRow, error) {
	rows, err := q.db.Query(ctx, listTipJarsForUserWithMemberCount, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTipJarsForUserWithMemberCountRow
	for rows.Next() {
		var i ListTipJarsForUserWithMemberCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.InviteCode,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MemberCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTipJar = `-- name: UpdateTipJar :one
UPDATE tip_jars
SET name = $2, description = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, invite_code, created_by, created_at, updated_at
`

type UpdateTipJarParams struct {
	ID          int32       `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
}

func (q *Queries) UpdateTipJar(ctx context.Context, arg UpdateTipJarParams) (TipJar, error) {
	row := q.db.QueryRow(ctx, updateTipJar, arg.ID, arg.Name, arg.Description)
	var i TipJar
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InviteCode,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

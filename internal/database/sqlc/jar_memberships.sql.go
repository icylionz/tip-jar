// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: jar_memberships.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJarMembership = `-- name: CreateJarMembership :one
INSERT INTO jar_memberships (jar_id, user_id, role)
VALUES ($1, $2, $3)
RETURNING id, jar_id, user_id, role, joined_at
`

type CreateJarMembershipParams struct {
	JarID  int32  `db:"jar_id" json:"jar_id"`
	UserID int32  `db:"user_id" json:"user_id"`
	Role   string `db:"role" json:"role"`
}

func (q *Queries) CreateJarMembership(ctx context.Context, arg CreateJarMembershipParams) (JarMembership, error) {
	row := q.db.QueryRow(ctx, createJarMembership, arg.JarID, arg.UserID, arg.Role)
	var i JarMembership
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const deleteJarMembership = `-- name: DeleteJarMembership :exec
DELETE FROM jar_memberships
WHERE jar_id = $1 AND user_id = $2
`

type DeleteJarMembershipParams struct {
	JarID  int32 `db:"jar_id" json:"jar_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteJarMembership(ctx context.Context, arg DeleteJarMembershipParams) error {
	_, err := q.db.Exec(ctx, deleteJarMembership, arg.JarID, arg.UserID)
	return err
}

const getJarMembership = `-- name: GetJarMembership :one
SELECT id, jar_id, user_id, role, joined_at
FROM jar_memberships
WHERE jar_id = $1 AND user_id = $2
`

type GetJarMembershipParams struct {
	JarID  int32 `db:"jar_id" json:"jar_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

func (q *Queries) GetJarMembership(ctx context.Context, arg GetJarMembershipParams) (JarMembership, error) {
	row := q.db.QueryRow(ctx, getJarMembership, arg.JarID, arg.UserID)
	var i JarMembership
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const isUserJarAdmin = `-- name: IsUserJarAdmin :one
SELECT EXISTS(
    SELECT 1 FROM jar_memberships
    WHERE jar_id = $1 AND user_id = $2 AND role = 'admin'
)
`

type IsUserJarAdminParams struct {
	JarID  int32 `db:"jar_id" json:"jar_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

func (q *Queries) IsUserJarAdmin(ctx context.Context, arg IsUserJarAdminParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserJarAdmin, arg.JarID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserJarMember = `-- name: IsUserJarMember :one
SELECT EXISTS(
    SELECT 1 FROM jar_memberships
    WHERE jar_id = $1 AND user_id = $2
)
`

type IsUserJarMemberParams struct {
	JarID  int32 `db:"jar_id" json:"jar_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

func (q *Queries) IsUserJarMember(ctx context.Context, arg IsUserJarMemberParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserJarMember, arg.JarID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listJarMembers = `-- name: ListJarMembers :many
SELECT jm.id, jm.jar_id, jm.user_id, jm.role, jm.joined_at,
       u.email, u.name, u.avatar
FROM jar_memberships jm
INNER JOIN users u ON jm.user_id = u.id
WHERE jm.jar_id = $1
ORDER BY jm.joined_at ASC
`

type ListJarMembersRow struct {
	ID       int32            `db:"id" json:"id"`
	JarID    int32            `db:"jar_id" json:"jar_id"`
	UserID   int32            `db:"user_id" json:"user_id"`
	Role     string           `db:"role" json:"role"`
	JoinedAt pgtype.Timestamp `db:"joined_at" json:"joined_at"`
	Email    string           `db:"email" json:"email"`
	Name     string           `db:"name" json:"name"`
	Avatar   pgtype.Text      `db:"avatar" json:"avatar"`
}

func (q *Queries) ListJarMembers(ctx context.Context, jarID int32) ([]ListJarMembersRow, error) {
	rows, err := q.db.Query(ctx, listJarMembers, jarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListJarMembersRow
	for rows.Next() {
		var i ListJarMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.JarID,
			&i.UserID,
			&i.Role,
			&i.JoinedAt,
			&i.Email,
			&i.Name,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMemberRole = `-- name: UpdateMemberRole :one
UPDATE jar_memberships
SET role = $3
WHERE jar_id = $1 AND user_id = $2
RETURNING id, jar_id, user_id, role, joined_at
`

type UpdateMemberRoleParams struct {
	JarID  int32  `db:"jar_id" json:"jar_id"`
	UserID int32  `db:"user_id" json:"user_id"`
	Role   string `db:"role" json:"role"`
}

func (q *Queries) UpdateMemberRole(ctx context.Context, arg UpdateMemberRoleParams) (JarMembership, error) {
	row := q.db.QueryRow(ctx, updateMemberRole, arg.JarID, arg.UserID, arg.Role)
	var i JarMembership
	err := row.Scan(
		&i.ID,
		&i.JarID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}
